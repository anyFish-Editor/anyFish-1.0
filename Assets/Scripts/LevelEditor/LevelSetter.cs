using UnityEngine;
using System.IO;


//THIS CLASS IS MOSTLY APPLE SPECIFIC, IT HANDLES MAC APP STORE COMPLIANCE, IT JUST DOES VERY BASIC STUFF IF RUN UNDER WINDOWS

public class LevelSetter : MonoBehaviour
{
	private string[] levelFileNames ;
	private string[] levelFileNamesWithouPath;
	private string[] appSupportFiles;
	// Use this for initialization
	void Start ()
	{
		if (Application.platform == RuntimePlatform.WindowsEditor || Application.platform == RuntimePlatform.WindowsPlayer)
		{
			//this is windows, do nothing special, just specify where the levels are, which is the levels folder inside the data folder in the same folder where this application is running
			GameManager.levelsPath  = new DirectoryInfo(Application.dataPath + "/Levels");
		}
		else if (Application.platform == RuntimePlatform.OSXEditor || Application.platform == RuntimePlatform.OSXPlayer)
		{
			
			if(Application.platform == RuntimePlatform.OSXEditor )
			{
				//check where the default level files are stored, in editor its the levels folder inside the projects asset folder
				GameManager.osxbundledlevelspath = new DirectoryInfo(Application.dataPath + "/Levels");
				
				GameManager.levelsPath = new DirectoryInfo(Application.dataPath + "/Levels");			
			}
			else if(Application.platform == RuntimePlatform.OSXPlayer)
			{
				
				//this is Mac OSX, more complex procedure needs to be done in order to be Mac App Store compliant
				//this method also works with application sanboxing in mac osx lion with the most strict entitlement rules
				GameManager.osxbundledlevelspath = new DirectoryInfo(Application.dataPath + "/Resources/Levels");
				GameManager.levelsPath  = new DirectoryInfo(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal)  + "/Library/Application Support/" + GameManager.companyName + "/"  + GameManager.productName  + "/Levels");
				
				//check where the bundled read only level files are stored in order to be copied to the proper folder, in OSX player its the resources folder inside the app bundle, in iOS its the Data folder inside the Xcode project generated by unity
				
				
				//check if the levels folder in application support exists
				if(!System.IO.Directory.Exists(GameManager.levelsPath.FullName))
				{
					if (System.IO.Directory.Exists(GameManager.osxbundledlevelspath.FullName)) 
					{
						//create the folder in Application Support
						System.IO.Directory.CreateDirectory(GameManager.levelsPath.FullName);
						
						//get all the files in the level folder and store them in a string array , also create another array of the same size for later use
						levelFileNames = System.IO.Directory.GetFiles(GameManager.osxbundledlevelspath.FullName,"*.xml");
						levelFileNamesWithouPath = new string[levelFileNames.Length];
						
						//iterate through every file in the levels folder
						for (int i = 0; i < levelFileNames.Length; i++) 
						{
							//remove the path and leave only the filenames and store them in the second array
							levelFileNamesWithouPath[i] = Path.GetFileName(levelFileNames[i]);
						
							//copy all the levels from app bundle to application support
							System.IO.File.Copy(levelFileNames[i],GameManager.levelsPath + "/" + levelFileNamesWithouPath[i],true);
						}
					}
				}
				else
				{
					//check if there is any file in the levels folder inside the application support folder of this application , and if there is none, copy all the default levels all over again
					appSupportFiles = System.IO.Directory.GetFiles(GameManager.levelsPath.FullName,"*.xml");

					if(appSupportFiles.Length == 0 )
					{
						//check if the levels folder inside the resource folder in the app bundle exists
						if (System.IO.Directory.Exists(GameManager.osxbundledlevelspath.FullName)) 
						{
							//get all the files in the level folder and store them in a string array , also create another array of the same size for later use
							levelFileNames = System.IO.Directory.GetFiles(GameManager.osxbundledlevelspath.FullName);
							levelFileNamesWithouPath = new string[levelFileNames.Length];
							
							for (int i = 0; i < levelFileNames.Length; i++) 
							{
								//remove the path and leave only the filenames and store them in the second array
								levelFileNamesWithouPath[i] = Path.GetFileName(levelFileNames[i]);
							
								//copy all the levels from app bundle to application support
								System.IO.File.Copy(levelFileNames[i],GameManager.levelsPath + "/" + levelFileNamesWithouPath[i],true);
							}
						}
					}
				}
			}
		}
	}
}

